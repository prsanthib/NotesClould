{"ast":null,"code":"import NoteContext from\"./noteContext\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const NoteState=props=>{const host=\"http://localhost:2000\";const notesInitial=[];const[notes,setNotes]=useState(notesInitial);// Get all Notes\nconst getNotes=async()=>{// API Call \nconst response=await fetch(\"\".concat(host,\"/api/notes/fetchallnotes\"),{method:'GET',headers:{'Content-Type':'application/json',\"auth-token\":localStorage.getItem('token')}});const json=await response.json();setNotes(json);};// Add a Note\nconst addNote=async(title,description,tag)=>{// TODO: API Call\n// API Call \nconst response=await fetch(\"\".concat(host,\"/api/notes/addnote\"),{method:'POST',headers:{'Content-Type':'application/json',\"auth-token\":localStorage.getItem('token')},body:JSON.stringify({title,description,tag})});const note=await response.json();setNotes(notes.concat(note));};// Delete a Note\nconst deleteNote=async id=>{// API Call\nconst response=await fetch(\"\".concat(host,\"/api/notes/deletenote/\").concat(id),{method:'DELETE',headers:{'Content-Type':'application/json',\"auth-token\":localStorage.getItem('token')}});const json=response.json();console.log(json);const newNotes=notes.filter(note=>{return note._id!==id;});setNotes(newNotes);};// Edit a Note\nconst editNote=async(id,title,description,tag)=>{// API Call \nconst response=await fetch(\"\".concat(host,\"/api/notes/updatenote/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json',\"auth-token\":localStorage.getItem('token')},body:JSON.stringify({title,description,tag})});const json=await response.json();console.log(json);let newNotes=JSON.parse(JSON.stringify(notes));// Logic to edit in client\nfor(let index=0;index<newNotes.length;index++){const element=newNotes[index];if(element._id===id){newNotes[index].title=title;newNotes[index].description=description;newNotes[index].tag=tag;break;}}setNotes(newNotes);};return/*#__PURE__*/_jsx(NoteContext.Provider,{value:{notes,addNote,deleteNote,editNote,getNotes},children:props.children});};export default NoteState;","map":{"version":3,"names":["NoteContext","useState","jsx","_jsx","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","concat","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children"],"sources":["/home/prasanthi/Desktop/NotesCloud/src/context/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\n\nconst NoteState = (props) => {\n  const host = \"http://localhost:2000\"\n  const notesInitial = []\n  const [notes, setNotes] = useState(notesInitial)\n\n  // Get all Notes\n  const getNotes = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json() \n    setNotes(json)\n  }\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({title, description, tag})\n    });\n\n    const note = await response.json();\n    setNotes(notes.concat(note))\n  }\n\n  // Delete a Note\n  const deleteNote = async (id) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json(); \n    console.log(json);\n    const newNotes = notes.filter((note) => { return note._id !== id })\n    setNotes(newNotes)\n  }\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({title, description, tag})\n    });\n    const json = await response.json(); \n    console.log(json);\n     let newNotes = JSON.parse(JSON.stringify(notes))\n    // Logic to edit in client\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag; \n        break; \n      }\n    }  \n    setNotes(newNotes);\n  }\n\n  return (\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\n      {props.children}\n    </NoteContext.Provider>\n  )\n\n}\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}